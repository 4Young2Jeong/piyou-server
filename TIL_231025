# Bazel을 이용한 MediaPipe의 jar 및 apk 빌드 방법

1. homebrew를 이용해 bazel을 설치한다.
    
    ```
    brew install --cask bazel
    ```
    
2. android sdk와 ndk를 설치한다.
    
    <aside>
    💡 구글 플레이 스토어에 업로드 하려면 타켓 api가 33이어야한다.(33버전)
    homebrew로 설치하면 29버전이 설치되고 그 마저도 제대로 설치되지 않기 때문에 Android Developer로 들어가서 command line tool 설치를 통해 33버전을 설치하자.
    또한 Bazel이 Android SDK의 빌드 도구 버전을 확인했을때 필요 버전이 30.0.0 이상이다.
    
    </aside>
    
    <aside>
    💡 여기서는 조금 틀렸지만, 그 과정을 그대로 남겨 놓는다.
    현재는 빌드가 되니까 현 상태를 그대로 놓고, 환경 변수들을 바꾸는 것은 하단에서 별도로 진행하겠다.
    
    </aside>
    
    - ndk 설치 및 환경변수 설정
        
        <aside>
        💡 homebrew로 설치하면 가장 최신버전이 설치되어서 mediapipe를 사용할 수 없다.
        반드시 android github로 들어가 지원하는 버전으로 설치하자.
        
        </aside>
        
        1. ndk는 20버전(`android-ndk-r20b-drawin-x86_64.zip`)을 다운받는다. (아래 링크)
            
            [Unsupported Downloads](https://github.com/android/ndk/wiki/Unsupported-Downloads)
            
            [](https://dl.google.com/android/repository/android-ndk-r20b-darwin-x86_64.zip)
            
        2. 압축을 해제한다.
            
            나는 그냥 해제해서 `/Users/choehayoung/Downloads/android-ndk-r20b` 에 압축을 풀었다.
            
        3. 이제 저 위치에 있는 ndk를 환경변수에 추가해준다.
        4. `open ~/.zshrc` 명령어를 사용해 `.zshrc` 파일을 연다.
        5. `.zshrc` 파일에 아래 코드를 추가해서 환경변수를 설정한다.
            
            ```
            export ANDROID_NDK_HOME=/Users/choehayoung/Downloads/android-ndk-r20b
            ```
            
        6. cmd + s늘 눌러서 저장하고 창을 닫는다.
        7. source ~/.zshrc로 적용시킨다.
        8. `echo $ANDROID_NDK_HOME` 명령어를 사용해서 정상적으로 환경변수가 설정되었는지 확인한다.
    - sdk 설치 및 환경변수 설정
        1. homebrew에서 `brew install android-sdk` 를 사용해서 설치한다.
        2. 해당 경로 `opt/homebrew/share/android-sdk` 를 환경변수에 등록한다.
        3. `open ~/.zshrc` 명령어를 사용해 `.zshrc` 파일을 연다.
        4. `.zshrc` 파일에 아래 코드를 추가해서 환경변수를 설정한다.
            
            ```
            export ANDROID_HOME=/opt/homebrew/share/android-sdk
            export PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools
            ```
            
        5. cmd + s늘 눌러서 저장하고 창을 닫는다.
        6. source ~/.zshrc로 적용시킨다.
        7. `echo $ANDROID_HOME` 명령어를 사용해서 정상적으로 환경변수가 설정되었는지 확인한다.
        8. `/opt/homebrew/sh/android-sdk` 경로로 가니 `tools` 폴더만 생성되어 있다. 정상적으로 설치되었다면 `build-tools` , `platforms` 등 Android SDK의 기본 디렉토리 구조가 생성되어야한다. 비정상적으로 설치되었다.
        9. 따라서 Android developer 사이트에서 Command line tools only 섹션(페이지 하단)으로 이동해서 Mac OS 용 sdktools-darwin을 다운받고 압축을 해제한다.
            
            [Download Android Studio & App Tools - Android Developers](https://developer.android.com/studio)
            
        10. 나는 그냥 해제해서 `/Users/choehayoung/Downloads/cmdline-tools` 에 위치해있다.
        11. 아래 명령어를 이용해서 sdk 설치 위치로 이동시킨다.
            
            ```
            mkdir -p $ANDROID_HOME/cmdline-tools/latest
            mv /Users/cheohayoung/Dowmloads/cmdline-tools/* $ANDROID_HOME/cmdline-tools/latest/
            ```
            
        12. sdkmanager로 설치(이 부분은 기억이 확실치 않다.)
            
            ```
            sdkmanager “platform-tools” “platforms;android-30”
            sdkmanager “build-tools;30.0.3”
            ```
            
3. mediapipe 가져오기
    
    ```
    git clone https://github.com/google/mediapipe.git
    ```
    
4. `/Users/choehayoung/mediapipe/mediapipe/examples/android/src/java/com/google/mediapipe/apps/holistictrackinggpu/BUILD` 의 BUILD 파일을 수정해준다(아래 코드를 추가해준다.)
    - BUILD
        
        ```
        android_binary(
            name = "holistictrackinggpu",
            srcs = glob(["*.java"]),
            assets = [
                "//mediapipe/graphs/holistic_tracking:holistic_tracking_gpu.binarypb",
                "//mediapipe/modules/face_detection:face_detection_short_range.tflite",
                "//mediapipe/modules/face_landmark:face_landmark.tflite",
                "//mediapipe/modules/hand_landmark:hand_landmark_full.tflite",
                "//mediapipe/modules/hand_landmark:hand_landmark_lite.tflite",
                "//mediapipe/modules/hand_landmark:handedness.txt",
                "//mediapipe/modules/holistic_landmark:hand_recrop.tflite",
                "//mediapipe/modules/pose_detection:pose_detection.tflite",
                "//mediapipe/modules/pose_landmark:pose_landmark_full.tflite",
            ],
            assets_dir = "",
            manifest = "//mediapipe/examples/android/src/java/com/google/mediapipe/apps/basic:AndroidManifest.xml",
            manifest_values = {
                "applicationId": "com.google.mediapipe.apps.holistictrackinggpu",
                "appName": "Holistic Tracking",
                "mainActivity": "com.google.mediapipe.apps.basic.MainActivity",
                "cameraFacingFront": "False",
                "binaryGraphName": "holistic_tracking_gpu.binarypb",
                "inputVideoStreamName": "input_video",
                "outputVideoStreamName": "output_video",
                "flipFramesVertically": "True",
                "converterNumBuffers": "3",
            },
            multidex = "native",
            deps = [
                ":mediapipe_jni_lib",
                "//mediapipe/examples/android/src/java/com/google/mediapipe/apps/basic:basic_lib",
                "//mediapipe/framework/formats:landmark_java_proto_lite",
                "//mediapipe/java/com/google/mediapipe/framework:android_framework",
            ],
        )
        
        android_library(
            name = "holistictrackinggpu_lib",
            srcs = glob(["*.java"]),
            manifest = "//mediapipe/examples/android/src/java/com/google/mediapipe/apps/basic:AndroidManifest.xml",
            deps = [
                ":mediapipe_jni_lib",
                "//mediapipe/examples/android/src/java/com/google/mediapipe/apps/basic:basic_lib",
                "//mediapipe/framework/formats:landmark_java_proto_lite",
                "//mediapipe/java/com/google/mediapipe/framework:android_framework",
            ],
        )
        ```
        
5. /`Users/choehayoung/mediapipe/WORKSPACE` 의 WORKSPACE 파일을 수정해준다(아래 코드를 추가해준다.)
    - WORKSPACE
        
        ```
        android_ndk_repository(
            name = "androidndk",
            path = "/Users/choehayoung/Downloads/android-ndk-r20b", # ANDROID_HOME 환경 변수의 값으로 변경.
            api_level = 20,
        )
        
        android_sdk_repository(
            name = "androidsdk",
            path = "/opt/homebrew/share/android-sdk", # ANDROID_HOME 환경 변수의 값으로 변경.
            api_level = 33,
            build_tools_version = "33.0.0"
        )
        ```
        
6. 여기서 WORKSPACE 내의 버전과 실제 설치되어 있는 버전 실제 위치와 환경변수 모든게 일치해야한다.
7. `/Users/choehayoung/mediapipe` 경로에서 아래 코드를 실행한다.
    - bazel 명령어
        
        ```
        bazel build -c opt --config=android_arm64 //mediapipe/examples/android/src/java/com/google/mediapipe/apps/holistictrackinggpu:holistictrackinggpu
        ```
        
    
    위 코드를 실행하면 BUILD 파일에 정의해놓은 android-binary가 실행된다.
    
8. `/private/var/tmp/_bazel_choehayoung/0aca2b8ad635071449e45a40b0a8c720/execroot/mediapipe/bazel-out/arm64-v8a-opt/bin/mediapipe/examples/android/src/java/com/google/mediapipe/apps/holistictrackinggpu` 경로에 산출물이 생성된다.(jar, apk)

---

# 오류

- JDK 버전 오류
    - 오류코드
        
        ```
        ❯ sdkmanager --list
        
        Exception in thread "main" java.lang.NoClassDefFoundError: javax/xml/bind/annotation/XmlSchema
        at com.android.repository.api.SchemaModule$SchemaModuleVersion.<init>(SchemaModule.java:156)
        at com.android.repository.api.SchemaModule.<init>(SchemaModule.java:75)
        at com.android.sdklib.repository.AndroidSdkHandler.<clinit>(AndroidSdkHandler.java:81)
        at com.android.sdklib.tool.sdkmanager.SdkManagerCli.main(SdkManagerCli.java:73)
        at com.android.sdklib.tool.sdkmanager.SdkManagerCli.main(SdkManagerCli.java:48)
        Caused by: java.lang.ClassNotFoundException: javax.xml.bind.annotation.XmlSchema
        at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)
        at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
        at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:525)
        ... 5 more
        ```
        
    
    원인: J**ava 9 이상의 버전에서 `javax.xml.bind.annotation.XmlSchema` 클래스가 더 이상 기본적으로 제공되지 않기 때문에 발생**
    
    해결: zulu jdk 8 설치 후 환경변수 설정
    
- Xcode 설치 오류
    - 오류코드
        
        **ERROR: /private/var/tmp/_bazel_choehayoung/0aca2b8ad635071449e45a40b0a8c720/external/bazel_tools/tools/android/BUILD:440:12: @bazel_tools//tools/android:databinding_exec depends on @local_config_apple_cc//:cc-compiler-darwin_arm64 in repository @local_config_apple_cc which failed to fetch. no such package '@local_config_apple_cc//': Failed to configure Apple CC toolchain, if you only have the command line tools installed and not Xcode, you cannot use this toolchain. You should either remove it or temporarily set 'BAZEL_NO_APPLE_CPP_TOOLCHAIN=1' in the environment
        ERROR: Analysis of target '//mediapipe/examples/android/src/java/com/google/mediapipe/apps/handtrackinggpu:handtrackinggpu' failed; build aborted:
        INFO: Elapsed time: 17.158s
        INFO: 0 processes.
        FAILED: Build did NOT complete successfully (85 packages loaded, 7757**
        
        **targets configured)
        currently loading: @org_tensorflow//tensorflow/lite
        Fetching ...lite?generation=1661875766398729; 966.7 KiB (989,902B)
        Fetching ...lite?generation=1661875760968579; 864.0 KiB (884,768B)
        Fetching ...lite?generation=1661875885885770; 1.3 MiB (1,398,132B)
        Fetching ...lite?generation=1662745358034050; 1.4 MiB (1,450,016B)
        Fetching .../java/v11.9/java_tools-v11.9.zip; 266.7 KiB (273,072B)
        Fetching**
        
        **[https://mirror.bazel.build/...oid_tools_pkg-0.27.0.tar.gz](https://mirror.bazel.build/...oid_tools_pkg-0.27.0.tar.gz)**
        
        **Fetching**
        
        **[https://github.com/.../download/v2.0.7/coursier.jar](https://github.com/.../download/v2.0.7/coursier.jar)**
        
        **Fetching**
        
        **[https://mirror.bazel.build/....0.15-macosx_aarch64.tar.gz](https://mirror.bazel.build/....0.15-macosx_aarch64.tar.gz)**
        
    
    원인: Xcode command line만 설치되었고 Xcode는 설치되지 않았기 때문
    
    해결: Mac OS를 14.1(23B73)로 업데이트 후 홈페이지에서 Xcode 15.0.1 설치
